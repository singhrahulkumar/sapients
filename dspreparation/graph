function Graph(noOfVertices) {
  this.noOfVertices = noOfVertices;
  this.AdjList = new Map();
}

Graph.prototype.addVertex = function(vertex){
  this.AdjList.set(vertex,[])
}

Graph.prototype.addEdge = function(s,d){
  this.AdjList.get(s).push(d);
  // if it is undirected graph
  this.AdjList.get(d).push(s);
}

Graph.prototype.printGraph = function(){
  let allVertices = this.AdjList.keys();
  
  for(let vertices of allVertices){
    let allAdjecents = this.AdjList.get(vertices);
    
    let conc = '';
    for(let adjecent of allAdjecents){
      conc = conc + adjecent + ' ';
    }
    console.log(vertices + " ----> " +conc);
  }
}

// Main DFS method 
Graph.prototype.dfs = function(startingNode){ 
    let visited = []; 
    this.DFSUtil(startingNode, visited); 
} 
  
// Recursive function which process and explore 
// all the adjacent vertex of the vertex with which it is called 
Graph.prototype.DFSUtil = function(vert, visited){
    visited.push(vert);
    console.log(vert,visited); 
    var get_neighbours = this.AdjList.get(vert); 
    for (let vert of get_neighbours) { 
        if (visited.indexOf(vert) === -1){
            this.DFSUtil(vert, visited); 
        }
    } 
} 

let g = new Graph(6);
let vertices = [ 'A', 'B', 'C', 'D', 'E', 'F' ]; 
  
// adding vertices 
for (var i = 0; i < vertices.length; i++) { 
    g.addVertex(vertices[i]); 
} 
  
// adding edges 
g.addEdge('A', 'B'); 
g.addEdge('A', 'D'); 
g.addEdge('A', 'E'); 
g.addEdge('B', 'C'); 
g.addEdge('D', 'E'); 
g.addEdge('E', 'F'); 
g.addEdge('E', 'C'); 
g.addEdge('C', 'F'); 
  
// prints all vertex and 
// its adjacency list 
// A -> B D E 
// B -> A C 
// C -> B E F 
// D -> A E 
// E -> A D F C 
// F -> E C 
g.printGraph(); 


g.dfs('A')
